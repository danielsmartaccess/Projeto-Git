# **Jogo da Adivinha√ß√£o com Tkinter**

"""
Este jogo utiliza os conceitos abordados at√© agora no curso, incluindo:
- Widgets do Tkinter (Labels, Buttons, Entry, Frames).
- Manipula√ß√£o de eventos (command, bind).
- Fun√ß√µes e vari√°veis.
- Estruturas de controle (if/else).

**Objetivo do Jogo:**
O jogador deve adivinhar um n√∫mero secreto entre 1 e 100. A interface exibir√° dicas como "muito alto" ou "muito baixo" at√© o jogador acertar.

"""

# Importando a biblioteca Tkinter
import tkinter as tk
import random

# **Fun√ß√£o para iniciar o jogo e definir o n√∫mero secreto**
def iniciar_jogo():
    global numero_secreto, tentativas
    numero_secreto = random.randint(1, 100)  # N√∫mero aleat√≥rio entre 1 e 100
    tentativas = 0  # Contador de tentativas
    label_mensagem.config(text="Tente adivinhar o n√∫mero entre 1 e 100!", fg="black")
    entry_tentativa.delete(0, tk.END)  # Limpar o campo de entrada
    label_tentativas.config(text="Tentativas: 0")

# **Fun√ß√£o para verificar a tentativa do jogador**
def verificar_tentativa():
    global tentativas
    try:
        tentativa = int(entry_tentativa.get())  # Captura o valor digitado
        tentativas += 1  # Incrementa o n√∫mero de tentativas
        label_tentativas.config(text=f"Tentativas: {tentativas}")
        
        # Verifica se a tentativa est√° correta
        if tentativa == numero_secreto:
            label_mensagem.config(text=f"Parab√©ns! Voc√™ acertou em {tentativas} tentativas! üéâ", fg="green")
        elif tentativa < numero_secreto:
            label_mensagem.config(text="Muito baixo! Tente um n√∫mero maior.", fg="blue")
        else:
            label_mensagem.config(text="Muito alto! Tente um n√∫mero menor.", fg="orange")
    except ValueError:
        label_mensagem.config(text="Por favor, insira apenas n√∫meros!", fg="red")
        entry_tentativa.delete(0, tk.END)

# **Fun√ß√£o para encerrar o jogo**
def encerrar_jogo():
    root.destroy()  # Fecha a janela

# **Janela Principal**
root = tk.Tk()
root.title("Jogo da Adivinha√ß√£o üé≤")
root.geometry("400x300")
root.configure(bg="lightyellow")

# **Widgets da Interface**
# T√≠tulo do jogo
label_titulo = tk.Label(root, text="Jogo da Adivinha√ß√£o", font=("Arial", 18, "bold"), bg="lightyellow")
label_titulo.pack(pady=10)

# Mensagem inicial
label_mensagem = tk.Label(root, text="Tente adivinhar o n√∫mero entre 1 e 100!", font=("Arial", 12), bg="lightyellow")
label_mensagem.pack(pady=10)

# Campo de entrada para a tentativa do jogador
entry_tentativa = tk.Entry(root, font=("Arial", 14), justify="center")
entry_tentativa.pack(pady=5)

# Bot√£o para verificar a tentativa
botao_verificar = tk.Button(root, text="Verificar", font=("Arial", 12), bg="green", fg="white", command=verificar_tentativa)
botao_verificar.pack(pady=5)

# Bot√£o para reiniciar o jogo
botao_reiniciar = tk.Button(root, text="Reiniciar", font=("Arial", 12), bg="blue", fg="white", command=iniciar_jogo)
botao_reiniciar.pack(pady=5)

# Bot√£o para encerrar o jogo
botao_encerrar = tk.Button(root, text="Sair", font=("Arial", 12), bg="red", fg="white", command=encerrar_jogo)
botao_encerrar.pack(pady=5)

# Label para mostrar o n√∫mero de tentativas
label_tentativas = tk.Label(root, text="Tentativas: 0", font=("Arial", 12), bg="lightyellow")
label_tentativas.pack(pady=5)

# Iniciar o jogo definindo o n√∫mero secreto
iniciar_jogo()

# Executando o loop principal da interface
tk.mainloop()

"""
### **Explica√ß√£o do Funcionamento do Jogo**

1. **Widgets Utilizados:**
   - **Label:** Para mostrar mensagens e feedback ao usu√°rio.
   - **Entry:** Permite que o usu√°rio digite sua tentativa.
   - **Button:** Executa a√ß√µes como verificar a tentativa, reiniciar ou sair do jogo.

2. **Fun√ß√µes Principais:**
   - `iniciar_jogo()`: Gera um n√∫mero aleat√≥rio e reinicia as configura√ß√µes iniciais.
   - `verificar_tentativa()`: Captura o valor digitado pelo usu√°rio, compara com o n√∫mero secreto e exibe mensagens de feedback (muito alto, muito baixo ou correto).
   - `encerrar_jogo()`: Fecha a aplica√ß√£o.

3. **Estruturas de Controle:**
   - **if/else**: Verifica a condi√ß√£o da tentativa e fornece o feedback adequado.
   - **try/except**: Garante que apenas valores num√©ricos sejam aceitos, evitando erros de entrada.

4. **Interatividade:**
   - O bot√£o "Verificar" processa a tentativa.
   - O bot√£o "Reiniciar" come√ßa um novo jogo.
   - O bot√£o "Sair" fecha a aplica√ß√£o.

### **Conclus√£o:**
Este jogo demonstra a aplica√ß√£o pr√°tica dos conceitos vistos at√© agora, como widgets, fun√ß√µes, tratamento de eventos e estruturas de controle. O aluno pode expandir o jogo, como adicionar um cron√¥metro ou salvar os resultados em um arquivo. üöÄ
"""
